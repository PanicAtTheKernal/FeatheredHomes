[gd_scene load_steps=18 format=3 uid="uid://cquo65bvi3v3n"]

[ext_resource type="Script" path="res://Scripts/Bird/bird.gd" id="1_pemh6"]
[ext_resource type="SpriteFrames" uid="uid://bn5ofc4v5g8hy" path="res://Assets/Birds/NewBird/animation.tres" id="2_fcsa4"]
[ext_resource type="Script" path="res://Scripts/Bird/bird_animation.gd" id="3_u2c0p"]
[ext_resource type="Script" path="res://Scripts/Bird/bird_bt_root.gd" id="6_lv1sx"]
[ext_resource type="Script" path="res://Scripts/Behaviour Tree/Composite/selector.gd" id="7_7tjyf"]
[ext_resource type="Script" path="res://Scripts/Behaviour Tree/Composite/sequence.gd" id="8_eo2tt"]
[ext_resource type="Script" path="res://Scripts/Bird/Actions/find_nearest_food.gd" id="10_e2vsf"]
[ext_resource type="Script" path="res://Scripts/Bird/Navigation/move.gd" id="11_latg4"]
[ext_resource type="Script" path="res://Scripts/Bird/Actions/consume_food.gd" id="16_uergt"]
[ext_resource type="Script" path="res://Scripts/Behaviour Tree/Decorators/inverter.gd" id="17_h46m4"]

[sub_resource type="CircleShape2D" id="CircleShape2D_2ghpp"]
radius = 6.0

[sub_resource type="GDScript" id="GDScript_ukm72"]
script/source = "# extends Task

# class_name CheckStamina

# # TODO Randomise this
# var threshold: float = 0.5

# var bird: Bird

# func _init(parent_bird: Bird, node_name: String=\"CheckStamina\") -> void:
# 	super(node_name)
# 	bird = parent_bird

# func run()->void:
# 	if bird.current_stamina > (bird.species.max_stamina * threshold):
# 		super.fail()
# 	else:
# 		super.success()

# func start()->void:
# 	pass
"

[sub_resource type="GDScript" id="GDScript_0x7ax"]
script/source = "extends Task

class_name CalculateDistances

var ground_agent: NavigationAgent2D
var flight_agent: NavigationAgent2D
var character_body: CharacterBody2D
var ground_cost: float
var flight_cost: float
var take_off_cost: float

## Not needed anymore
## @deprecated
##

@export
var mid_flight_calculations: bool = true

func run()->void:
	# Prevent calculate distance to once per second instead of 60 a second  
	if data[\"calculate_distances\"] == false:
		get_child(0).run()
		super.success()
		return
	
	# It won't build the path unless this function is called
	ground_agent.get_next_path_position()
	flight_agent.get_next_path_position()
	
	var ground_path = ground_agent.get_current_navigation_result().path
	var flight_path = flight_agent.get_current_navigation_result().path
	
	var ground_dist = BirdHelperFunctions.total_distance(ground_path)	
	var flight_dist = BirdHelperFunctions.total_distance(flight_path)
	
	var ground_dist_index = ground_agent.get_current_navigation_path_index()#
	var ground_path_actual = ground_path.slice(ground_dist_index, len(ground_path)-1)
	var ground_dist_actual = BirdHelperFunctions.total_distance(ground_path_actual)
	
	var flight_dist_index = flight_agent.get_current_navigation_path_index()#
	var flight_path_actual = flight_path.slice(flight_dist_index, len(flight_path)-1)
	var flight_dist_actual = BirdHelperFunctions.total_distance(flight_path_actual)
	
	var total_ground_energy_cost = BirdHelperFunctions.calculate_energy_cost(ground_dist_actual, 0.0, ground_cost)
	var total_flight_energy_cost = BirdHelperFunctions.calculate_energy_cost(flight_dist_actual, take_off_cost, flight_cost)
	
	data[\"ground_dist\"] = ground_dist
	data[\"flight_dist\"] = flight_dist
	data[\"ground_dist_actual\"] = ground_dist_actual
	data[\"flight_dist_actual\"] = flight_dist_actual
	data[\"total_ground_energy_cost\"] = total_ground_energy_cost
	data[\"total_flight_energy_cost\"] = total_flight_energy_cost
	data[\"calculate_distances\"] = false

	get_child(0).run()
	# Waiting for the movement nodes to succeed will prevent this node from calculating mid_flight
	if mid_flight_calculations:
		super.success()
	else:
		super.running()
	
func child_success():
	super.success()

func start()->void:
	ground_agent = self.data[\"ground_agent\"]
	flight_agent = self.data[\"flight_agent\"]
	character_body = self.data[\"character_body\"]
	ground_cost = self.data[\"ground_cost\"]
	flight_cost = self.data[\"flight_cost\"]
	take_off_cost = self.data[\"take_off_cost\"]
	super.start()
"

[sub_resource type="GDScript" id="GDScript_rxyt5"]
script/source = "extends Task

class_name CheckIfGroundIsEfficient

## Not needed anymore
## @deprecated
##

@export

var tile_map: TileMap
var ground_agent: NavigationAgent2D
var character_body: CharacterBody2D

func run()->void:
	var flight_cost:float = data[\"total_flight_energy_cost\"]
	var ground_cost:float = data[\"total_ground_energy_cost\"]
	
	if ground_cost == null:
		printerr(\"calculate distances node is missing\")
	
	if not ground_agent.is_target_reachable() or ground_agent.get_current_navigation_result().path == PackedVector2Array([]):
		super.fail()
		return
	
	if ground_cost > flight_cost:
		super.fail()
		return
		

	self.data[\"preferred_agent\"] = \"ground\"
	self.data[\"is_flying\"] = false
	character_body.set_collision_mask_value(1, true)
	character_body.set_collision_mask_value(2, false)
	super.success()

func start()->void:
	tile_map = self.data[\"tile_map\"]
	ground_agent = self.data[\"ground_agent\"]
	character_body = self.data[\"character_body\"]
"

[sub_resource type="GDScript" id="GDScript_vd0rp"]
script/source = "extends Task

class_name CheckIfFlyingIsEfficient

## Not needed anymore
## @deprecated
##

var character_body: CharacterBody2D
var flight_agent: NavigationAgent2D

func run()->void:
	var flight_cost:float = data[\"total_flight_energy_cost\"]
	var ground_cost:float = data[\"total_ground_energy_cost\"]
	var path: PackedVector2Array = flight_agent.get_current_navigation_result().path
	
	if flight_cost == null:
		printerr(\"calculate distances node is missing\")
	
	if not flight_agent.is_target_reachable() or flight_agent.get_current_navigation_result().path == PackedVector2Array([]):
		super.fail()
		return
	
	if flight_cost > ground_cost:
		super.fail()
		return
	
	data[\"preferred_agent\"] = \"flight\"
	if data[\"is_flying\"] == false:
		BirdHelperFunctions.burn_caloires(data[\"take_off_cost\"], data)
		data[\"is_flying\"] = true
	character_body.set_collision_mask_value(1, false)
	character_body.set_collision_mask_value(2, true)
	super.success()

func start()->void:
	character_body = data[\"character_body\"]
	flight_agent = data[\"flight_agent\"]
"

[sub_resource type="GDScript" id="GDScript_v6lxm"]
script/source = "extends Task

class_name FlyToTarget

@export_range(0.1, 3.0)
var speed_multiplier: float = 1.3

var flight_agent: NavigationAgent2D
var character_body: CharacterBody2D

func run()->void:
	var direction = character_body.to_local(flight_agent.get_next_path_position()).normalized()
	character_body.velocity = direction * (BirdHelperFunctions.SPEED*speed_multiplier) * self.data[\"delta\"]
	
	var is_character_at_target = BirdHelperFunctions.character_at_target(character_body.global_position, data[\"target\"])
	if is_character_at_target == false and flight_agent.is_target_reachable():
		var should_flip_h = direction.x < 0
		data[\"change_state\"].emit(\"Flying\", should_flip_h)
		character_body.move_and_slide()
		super.running()
	elif is_character_at_target:
		data[\"is_flying\"] = false
		data[\"target_reached\"] = true
		super.success()
	elif not flight_agent.is_target_reachable():
		super.fail()

	
func start()->void:
	flight_agent = self.data[\"flight_agent\"]
	character_body = self.data[\"character_body\"]
	super.start()
"

[sub_resource type="GDScript" id="GDScript_7lcj5"]
script/source = "#extends Task
#
#class_name FindRandomSpot
#
#var bird: Bird
#
#func _init(parent_bird, node_name:=\"FindRandomSpot\") -> void:
	#super(node_name)
	#bird = parent_bird
#
#func run()->void:
	## TODO Fix the issue where the random spot can be on water
	#var random_tile = BirdHelperFunctions.find_random_point_within_tile_map(bird.tile_map, bird.global_position, bird.species.flight_max_distance)
	#var target = BirdHelperFunctions.calculate_tile_position(random_tile)
	#await bird.update_target(target)
	#super.success()
	#
#func start()->void:
	#pass
"

[node name="Bird" type="CharacterBody2D"]
z_index = 2
collision_layer = 0
motion_mode = 1
wall_min_slide_angle = 0.0
script = ExtResource("1_pemh6")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.15, 0.15)
sprite_frames = ExtResource("2_fcsa4")
animation = &"Flight"
autoplay = "default"
script = ExtResource("3_u2c0p")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_2ghpp")

[node name="NavAgent" type="NavigationAgent2D" parent="."]
avoidance_enabled = true
avoidance_mask = 3
debug_enabled = true
debug_use_custom = true

[node name="FlightAgent" type="NavigationAgent2D" parent="."]
navigation_layers = 2
avoidance_enabled = true
avoidance_layers = 2
avoidance_mask = 3
debug_enabled = true
debug_use_custom = true
debug_path_custom_color = Color(0, 1, 1, 1)

[node name="CalorieTimer" type="Timer" parent="."]
autostart = true

[node name="NavigationTimer" type="Timer" parent="."]

[node name="BirdBehaviouralTree" type="Node" parent="."]
script = ExtResource("6_lv1sx")

[node name="Selector" type="Node" parent="BirdBehaviouralTree"]
script = ExtResource("7_7tjyf")

[node name="Sequence" type="Node" parent="BirdBehaviouralTree/Selector"]
script = ExtResource("8_eo2tt")

[node name="CheckStamina" type="Node" parent="BirdBehaviouralTree/Selector/Sequence"]
script = SubResource("GDScript_ukm72")

[node name="FindNearestFood" type="Node" parent="BirdBehaviouralTree/Selector/Sequence"]
script = ExtResource("10_e2vsf")

[node name="CalculateDistances" type="Node" parent="BirdBehaviouralTree/Selector/Sequence"]
script = SubResource("GDScript_0x7ax")
mid_flight_calculations = false

[node name="MovementSelector" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances"]
script = ExtResource("7_7tjyf")

[node name="GroundSequence" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector"]
script = ExtResource("8_eo2tt")

[node name="CheckIfGroundIsEfficient" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector/GroundSequence"]
script = SubResource("GDScript_rxyt5")

[node name="MoveOnGround" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector/GroundSequence"]
script = ExtResource("11_latg4")

[node name="FlightSequence" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector"]
script = ExtResource("8_eo2tt")

[node name="CheckIfFlyingIsEfficient" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector/FlightSequence"]
script = SubResource("GDScript_vd0rp")

[node name="FlyToTarget" type="Node" parent="BirdBehaviouralTree/Selector/Sequence/CalculateDistances/MovementSelector/FlightSequence"]
script = SubResource("GDScript_v6lxm")

[node name="ConsumeFood" type="Node" parent="BirdBehaviouralTree/Selector/Sequence"]
script = ExtResource("16_uergt")

[node name="FreeRoamSequence" type="Node" parent="BirdBehaviouralTree/Selector"]
script = ExtResource("8_eo2tt")

[node name="Selector" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence"]
script = ExtResource("7_7tjyf")

[node name="ExcessStaminaInverter" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/Selector"]
script = ExtResource("17_h46m4")

[node name="CheckStamina" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/Selector/ExcessStaminaInverter"]
script = SubResource("GDScript_ukm72")

[node name="NoFoodFoundInverter" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/Selector"]
script = ExtResource("17_h46m4")

[node name="FindNearestFood" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/Selector/NoFoodFoundInverter"]
script = ExtResource("10_e2vsf")

[node name="FindRandomSpot" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence"]
script = SubResource("GDScript_7lcj5")

[node name="CalculateDistances" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence"]
script = SubResource("GDScript_0x7ax")

[node name="MovementSelector" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances"]
script = ExtResource("7_7tjyf")

[node name="GroundSequence" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector"]
script = ExtResource("8_eo2tt")

[node name="CheckIfGroundIsEfficient" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector/GroundSequence"]
script = SubResource("GDScript_rxyt5")

[node name="MoveOnGround" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector/GroundSequence"]
script = ExtResource("11_latg4")

[node name="FlightSequence" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector"]
script = ExtResource("8_eo2tt")

[node name="CheckIfFlyingIsEfficient" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector/FlightSequence"]
script = SubResource("GDScript_vd0rp")

[node name="FlyToTarget" type="Node" parent="BirdBehaviouralTree/Selector/FreeRoamSequence/CalculateDistances/MovementSelector/FlightSequence"]
script = SubResource("GDScript_v6lxm")

[connection signal="animation_finished" from="AnimatedSprite2D" to="AnimatedSprite2D" method="_on_animation_finished"]
[connection signal="navigation_finished" from="NavAgent" to="BirdBehaviouralTree" method="_on_ground_agent_navigation_finished"]
[connection signal="path_changed" from="NavAgent" to="BirdBehaviouralTree" method="_on_ground_agent_path_changed"]
[connection signal="path_changed" from="FlightAgent" to="BirdBehaviouralTree" method="_on_flight_agent_path_changed"]
[connection signal="timeout" from="CalorieTimer" to="BirdBehaviouralTree" method="_on_calorie_timer_timeout"]
[connection signal="timeout" from="NavigationTimer" to="BirdBehaviouralTree" method="_on_navigation_update_timeout"]
